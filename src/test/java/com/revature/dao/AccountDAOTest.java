package com.revature.dao;

import static org.junit.Assert.*;

import com.revature.pojo.Account;
import org.junit.BeforeClass;
import org.junit.Test;

public class AccountDAOTest {

    private static AccountDAO ad;
    private static Account a;

    @BeforeClass
    public static void setup() {
        ad = new AccountDAOImpl();
        a = new Account(104,3500.00,2);
    }

    /******************************************************************************************************************
    Test cases for AccountDAOImpl
     ******************************************************************************************************************/

    /*
    Test cases for adding
     */
    @Test
    public void testAddAccountTrue() {
        assertTrue(ad.addAccount(a));
    }

    @Test
    public void testAddNullAccountFalse() {
        assertFalse(ad.addAccount(null));
    }

    /*
    Test cases for deposit
     */
    @Test
    public void testDepositNullAccountReturnZero() {
        assertEquals(0, ad.deposit(null, a.getOwnerID(), 100), 0.0f);
    }

    @Test
    public void testDepositNegativeReturnZero() {
        assertEquals(0, ad.deposit(a, a.getOwnerID(),-100), 0.0f);
    }

    //These tests are difficult to check due to a lack of ability to get the autogenerated account ID
    @Test
    public void testDepositPositiveNumber() {
        double expectedBalance = a.getAccountBalance() + 100;
        assertEquals(expectedBalance, ad.deposit(a, a.getOwnerID(),100), 0.0f);
    }

    /*
    Test cases for withdrawing
     */
    @Test
    public void testWithdrawNullAccountReturnZero() {
        assertEquals(0, ad.withdraw(null, a.getOwnerID(),100), 0.0f);
    }

    @Test
    public void testWithdrawNegativeReturnZero() {
        assertEquals(0, ad.withdraw(a, a.getOwnerID(),-100), 0.0f);
    }

    //These tests are difficult to check due to a lack of ability to get the autogenerated account ID
    @Test
    public void testWithdrawPositiveNumber() {
        double expectedBalance = a.getAccountBalance() - 100;
        assertEquals(expectedBalance, ad.withdraw(a, a.getOwnerID(),100), 0.0f);
    }

    @Test
    public void testWithdrawOverdraft() {
        double overDraw = a.getAccountBalance()+100;
        assertEquals(0, ad.withdraw(a, a.getOwnerID(), overDraw), 0.0f);
    }

    /**
     * Test cases for finding accounts
     */
    @Test
    public void testGetAccountNegativeNull() {
        assertNull(ad.getAccountById(-1));
    }

    @Test
    public void testGetAccountIdNotExistNull() {
        assertNull(ad.getAccountById(15));
    }

    //These tests are difficult to check due to a lack of ability to get the autogenerated account ID
    @Test
    public void testGetAccountIdGoodTrue() {
        assertNotNull(ad.getAccountById(a.getAccountID()));
    }

    /**
     * Test cases for deleting accounts
     */
    @Test
    public void testDeleteNullFalse() {
        assertFalse(ad.deleteAccount(null));
    }

    @Test
    public void testDeleteAccountWithBalanceFalse() {
        ad.deposit(a, a.getOwnerID(),100);
        assertFalse(ad.deleteAccount(a));
    }

    //These tests are difficult to check due to a lack of ability to get the autogenerated account ID
    @Test
    public void testDeleteAccountTrue() {
        ad.withdraw(a, a.getOwnerID(), a.getAccountBalance());
        assertTrue(ad.deleteAccount(a));
    }

    @Test
    public void testDeleteInvalidAccountIDFalse() {
        a.setAccountID(15);
        assertFalse(ad.deleteAccount(a));
    }
}
